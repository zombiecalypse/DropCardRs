{"version":3,"file":"488.bootstrap.js","mappings":"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","sources":["webpack://flashcards-www/./pkg/flashcards.js","webpack://flashcards-www/./pkg/flashcards_bg.js"],"sourcesContent":["import * as wasm from \"./flashcards_bg.wasm\";\nexport * from \"./flashcards_bg.js\";\nimport { __wbg_set_wasm } from \"./flashcards_bg.js\";\n__wbg_set_wasm(wasm);\nwasm.__wbindgen_start();\n","let wasm;\nexport function __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches && builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nconst cachedTextEncoder = new TextEncoder();\n\nif (!('encodeInto' in cachedTextEncoder)) {\n    cachedTextEncoder.encodeInto = function (arg, view) {\n        const buf = cachedTextEncoder.encode(arg);\n        view.set(buf);\n        return {\n            read: arg.length,\n            written: buf.length\n        };\n    }\n}\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8ArrayMemory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);\n        const ret = cachedTextEncoder.encodeInto(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachedDataViewMemory0 = null;\n\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer)) {\n        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nconst MAX_SAFARI_DECODE_BYTES = 2146435072;\nlet numBytesDecoded = 0;\nfunction decodeText(ptr, len) {\n    numBytesDecoded += len;\n    if (numBytesDecoded >= MAX_SAFARI_DECODE_BYTES) {\n        cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n        cachedTextDecoder.decode();\n        numBytesDecoded = len;\n    }\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return decodeText(ptr, len);\n}\n/**\n * @enum {0 | 1 | 2}\n */\nexport const GameMode = Object.freeze({\n    Normal: 0, \"0\": \"Normal\",\n    Reverse: 1, \"1\": \"Reverse\",\n    Both: 2, \"2\": \"Both\",\n});\n\nconst GameFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_game_free(ptr >>> 0, 1));\n\nexport class Game {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Game.prototype);\n        obj.__wbg_ptr = ptr;\n        GameFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        GameFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_game_free(ptr, 0);\n    }\n    /**\n     * @param {number} width\n     * @param {number} height\n     * @param {number} seed\n     * @param {GameMode} mode\n     * @returns {Game}\n     */\n    static new(width, height, seed, mode) {\n        const ret = wasm.game_new(width, height, seed, mode);\n        return Game.__wrap(ret);\n    }\n    /**\n     * @param {number} dt\n     */\n    tick(dt) {\n        wasm.game_tick(this.__wbg_ptr, dt);\n    }\n    /**\n     * @returns {any}\n     */\n    get_cards() {\n        const ret = wasm.game_get_cards(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {number}\n     */\n    get_id() {\n        const ret = wasm.game_get_id(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {any}\n     */\n    get_unlocked_cards() {\n        const ret = wasm.game_get_unlocked_cards(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {number}\n     */\n    get_score() {\n        const ret = wasm.game_get_score(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {number}\n     */\n    get_health() {\n        const ret = wasm.game_get_health(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {number}\n     */\n    get_max_health() {\n        const ret = wasm.game_get_max_health(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {boolean}\n     */\n    is_game_over() {\n        const ret = wasm.game_is_game_over(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    pause() {\n        wasm.game_pause(this.__wbg_ptr);\n    }\n    resume() {\n        wasm.game_resume(this.__wbg_ptr);\n    }\n    /**\n     * @returns {boolean}\n     */\n    is_paused() {\n        const ret = wasm.game_is_paused(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    restart() {\n        wasm.game_restart(this.__wbg_ptr);\n    }\n    /**\n     * @param {string} answer\n     * @returns {boolean}\n     */\n    submit_answer(answer) {\n        const ptr0 = passStringToWasm0(answer, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.game_submit_answer(this.__wbg_ptr, ptr0, len0);\n        return ret !== 0;\n    }\n}\nif (Symbol.dispose) Game.prototype[Symbol.dispose] = Game.prototype.free;\n\nexport function __wbg_new_19c25a3f2fa63a02() {\n    const ret = new Object();\n    return ret;\n};\n\nexport function __wbg_new_1f3a344cf3123716() {\n    const ret = new Array();\n    return ret;\n};\n\nexport function __wbg_set_3fda3bac07393de4(arg0, arg1, arg2) {\n    arg0[arg1] = arg2;\n};\n\nexport function __wbg_set_90f6c0f7bd8c0415(arg0, arg1, arg2) {\n    arg0[arg1 >>> 0] = arg2;\n};\n\nexport function __wbg_wbindgendebugstring_99ef257a3ddda34d(arg0, arg1) {\n    const ret = debugString(arg1);\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_wbindgenthrow_451ec1a8469d7eb6(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nexport function __wbindgen_cast_2241b6af4c4b2941(arg0, arg1) {\n    // Cast intrinsic for `Ref(String) -> Externref`.\n    const ret = getStringFromWasm0(arg0, arg1);\n    return ret;\n};\n\nexport function __wbindgen_cast_d6cd19b81560fd6e(arg0) {\n    // Cast intrinsic for `F64 -> Externref`.\n    const ret = arg0;\n    return ret;\n};\n\nexport function __wbindgen_init_externref_table() {\n    const table = wasm.__wbindgen_export_2;\n    const offset = table.grow(4);\n    table.set(0, undefined);\n    table.set(offset + 0, undefined);\n    table.set(offset + 1, null);\n    table.set(offset + 2, true);\n    table.set(offset + 3, false);\n    ;\n};\n\n"],"names":["wasm","__wbg_set_wasm","val","debugString","type","description","name","length","Array","isArray","debug","i","builtInMatches","exec","toString","call","className","JSON","stringify","_","Error","message","stack","WASM_VECTOR_LEN","cachedUint8ArrayMemory0","getUint8ArrayMemory0","byteLength","Uint8Array","memory","buffer","cachedTextEncoder","TextEncoder","passStringToWasm0","arg","malloc","realloc","undefined","buf","encode","ptr","subarray","set","len","mem","offset","code","charCodeAt","slice","view","encodeInto","written","read","cachedDataViewMemory0","getDataViewMemory0","detached","DataView","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","MAX_SAFARI_DECODE_BYTES","numBytesDecoded","getStringFromWasm0","decodeText","GameMode","Object","freeze","Normal","Reverse","Both","GameFinalization","FinalizationRegistry","register","unregister","__wbg_game_free","Game","__wrap","obj","create","prototype","__wbg_ptr","__destroy_into_raw","this","free","width","height","seed","mode","ret","game_new","tick","dt","game_tick","get_cards","game_get_cards","get_id","game_get_id","get_unlocked_cards","game_get_unlocked_cards","get_score","game_get_score","get_health","game_get_health","get_max_health","game_get_max_health","is_game_over","game_is_game_over","pause","game_pause","resume","game_resume","is_paused","game_is_paused","restart","game_restart","submit_answer","answer","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","game_submit_answer","__wbg_new_19c25a3f2fa63a02","__wbg_new_1f3a344cf3123716","__wbg_set_3fda3bac07393de4","arg0","arg1","arg2","__wbg_set_90f6c0f7bd8c0415","__wbg_wbindgendebugstring_99ef257a3ddda34d","ptr1","len1","setInt32","__wbg_wbindgenthrow_451ec1a8469d7eb6","__wbindgen_cast_2241b6af4c4b2941","__wbindgen_cast_d6cd19b81560fd6e","__wbindgen_init_externref_table","table","__wbindgen_export_2","grow","Symbol","dispose"],"sourceRoot":""}