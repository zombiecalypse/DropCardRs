(()=>{var e,t,n={},a={};function d(e){var t=a[e];if(void 0!==t)return t.exports;var o=a[e]={exports:{}};return n[e](o,o.exports,d),o.exports}d.m=n,d.d=(e,t)=>{for(var n in t)d.o(t,n)&&!d.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},d.f={},d.e=e=>Promise.all(Object.keys(d.f).reduce((t,n)=>(d.f[n](e,t),t),[])),d.u=e=>e+".bootstrap.js",d.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="flashcards-www:",d.l=(n,a,o,s)=>{if(e[n])e[n].push(a);else{var r,i;if(void 0!==o)for(var l=document.getElementsByTagName("script"),c=0;c<l.length;c++){var m=l[c];if(m.getAttribute("src")==n||m.getAttribute("data-webpack")==t+o){r=m;break}}r||(i=!0,(r=document.createElement("script")).charset="utf-8",r.timeout=120,d.nc&&r.setAttribute("nonce",d.nc),r.setAttribute("data-webpack",t+o),r.src=n),e[n]=[a];var u=(t,a)=>{r.onerror=r.onload=null,clearTimeout(p);var d=e[n];if(delete e[n],r.parentNode&&r.parentNode.removeChild(r),d&&d.forEach(e=>e(a)),t)return t(a)},p=setTimeout(u.bind(null,void 0,{type:"timeout",target:r}),12e4);r.onerror=u.bind(null,r.onerror),r.onload=u.bind(null,r.onload),i&&document.head.appendChild(r)}},d.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},d.p="/DropCardRs/",(()=>{d.b=document.baseURI||self.location.href;var e={792:0};d.f.j=(t,n)=>{var a=d.o(e,t)?e[t]:void 0;if(0!==a)if(a)n.push(a[2]);else{var o=new Promise((n,d)=>a=e[t]=[n,d]);n.push(a[2]=o);var s=d.p+d.u(t),r=new Error;d.l(s,n=>{if(d.o(e,t)&&(0!==(a=e[t])&&(e[t]=void 0),a)){var o=n&&("load"===n.type?"missing":n.type),s=n&&n.target&&n.target.src;r.message="Loading chunk "+t+" failed.\n("+o+": "+s+")",r.name="ChunkLoadError",r.type=o,r.request=s,a[1](r)}},"chunk-"+t,t)}};var t=(t,n)=>{var a,o,[s,r,i]=n,l=0;if(s.some(t=>0!==e[t])){for(a in r)d.o(r,a)&&(d.m[a]=r[a]);i&&i(d)}for(t&&t(n);l<s.length;l++)o=s[l],d.o(e,o)&&e[o]&&e[o][0](),e[o]=0},n=self.webpackChunkflashcards_www=self.webpackChunkflashcards_www||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),window.isFlashCardGameRunning?console.warn("Skipping duplicate game initialization."):(window.isFlashCardGameRunning=!0,d.e(488).then(d.bind(d,488)).then(async e=>{await e.default();const{Game:t,GameMode:n,get_default_deck:a}=e,d=document.getElementById("start-screen"),o=document.getElementById("start-default-btn"),s=document.getElementById("anki-import-input"),r=document.getElementById("game-container"),i=document.getElementById("deck-config-screen"),l=document.getElementById("card-list-container"),c=document.getElementById("start-configured-game-btn");let m=[];function u(e){m=e,l.innerHTML="";const t=document.createElement("ul");t.id="card-list",e.forEach((e,n)=>{const a=document.createElement("li");a.draggable=!0,a.dataset.originalIndex=n;const d=document.createElement("input");d.type="checkbox",d.checked=!0;const o=document.createElement("label");o.textContent=`${e.front} - ${e.back}`,a.appendChild(d),a.appendChild(o),t.appendChild(a)}),l.appendChild(t);let n=null;t.addEventListener("dragstart",e=>{n=e.target,e.dataTransfer.effectAllowed="move",setTimeout(()=>e.target.classList.add("dragging"),0)}),t.addEventListener("dragend",e=>{n&&n.classList.remove("dragging")}),t.addEventListener("dragover",e=>{e.preventDefault();const a=e.target.closest("li");if(a&&a!==n){const d=a.getBoundingClientRect(),o=(e.clientY-d.top)/(d.bottom-d.top)>.5;t.insertBefore(n,o&&a.nextSibling||a)}}),d.classList.add("hidden"),i.classList.remove("hidden")}c.addEventListener("click",()=>{const a=document.getElementById("card-list"),o=[];a.querySelectorAll("li").forEach(e=>{if(e.querySelector('input[type="checkbox"]').checked){const t=parseInt(e.dataset.originalIndex,10);o.push(m[t])}}),0!==o.length?(i.classList.add("hidden"),function(a){r.classList.remove("hidden");const o=document.createElement("style");o.textContent="\n        .shake {\n            animation: shake 0.5s;\n        }\n        @keyframes shake {\n            10%, 90% { transform: translateX(-1px); }\n            20%, 80% { transform: translateX(2px); }\n            30%, 50%, 70% { transform: translateX(-4px); }\n            40%, 60% { transform: translateX(4px); }\n        }\n        .card.solved {\n            animation: solved-animation 0.5s forwards;\n        }\n        @keyframes solved-animation {\n            to {\n                transform: scale(1.1);\n                opacity: 0;\n            }\n        }\n    ",document.head.appendChild(o);const i=document.getElementById("game-board"),l=i.clientWidth,c=i.clientHeight,m=document.querySelector('input[name="game-mode"]:checked').value;let u=n.Normal;"reverse"===m?u=n.Reverse:"both"===m&&(u=n.Both);const p=document.getElementById("debug-mode").checked,h=window.innerWidth<=600?.75:1,f=BigInt(Math.floor(Math.random()*2**32));let g;try{g=t.new(l,c,f,u,h,a)}catch(e){return alert(`Error initializing game: ${e}`),d.classList.remove("hidden"),r.classList.add("hidden"),void(s.value="")}const v=g.get_id();console.log(`[Game ${v}] Initialized.`);const b=document.getElementById("cards-container"),y=document.getElementById("score"),E=document.getElementById("health"),k=document.getElementById("game-over-screen"),w=document.getElementById("answer-input"),_=document.getElementById("submit-btn"),L=document.getElementById("pause-btn"),x=document.getElementById("anki-export-btn");let C=null,I=new Map,B=new Map;p&&(C=document.createElement("div"),C.id="debug-pane",document.body.appendChild(C));let S=null,M=null,T=null,$=null;const A=document.createElement("div");function N(){if(g.is_game_over())g.restart(),k.classList.add("hidden"),x.classList.add("hidden"),A.style.display="none",w.focus();else if(g.is_paused())g.resume();else{const e=w.value;e&&(g.submit_answer(e)||(i.classList.add("shake"),setTimeout(()=>{i.classList.remove("shake")},500)),w.value="")}}A.id="pause-screen",A.className="overlay",A.innerHTML="<h1>Paused</h1><p>Press Enter to continue</p>",Object.assign(A.style,{position:"absolute",top:"0",left:"0",width:"100%",height:"100%",backgroundColor:"rgba(0, 0, 0, 0.7)",color:"white",zIndex:"20",display:"none",justifyContent:"center",alignItems:"center",flexDirection:"column"}),i.appendChild(A),M=e=>{"Enter"===e.key&&(e.preventDefault(),N())},w.addEventListener("keydown",M),_.addEventListener("click",N),T=e=>{"Tab"!==e.key||g.is_game_over()||(e.preventDefault(),g.pause())},document.addEventListener("keydown",T),L.addEventListener("click",()=>{g.is_game_over()||g.pause()}),x.addEventListener("click",function(){const e=g.get_missed_cards();if(0===e.length)return void alert("No missed cards to export.");let t="#separator:tab\n#html:true\n";t+=e.filter((e,t,n)=>t===n.findIndex(t=>t.raw_front===e.raw_front)).map(e=>`${e.raw_front}\t${e.raw_back}`).join("\n");const n=new Blob([t],{type:"text/plain;charset=utf-8;"}),a=document.createElement("a");if(void 0!==a.download){const e=URL.createObjectURL(n);a.setAttribute("href",e),a.setAttribute("download","anki_export.txt"),a.style.visibility="hidden",document.body.appendChild(a),a.click(),document.body.removeChild(a)}}),$=()=>{document.hidden&&!g.is_game_over()&&g.pause()},document.addEventListener("visibilitychange",$);let j=0;S=requestAnimationFrame(function e(t){const n=(t-j)/1e3;j=t,g.tick(n||0),function(){const e=g.get_cards(),t=new Set(e.map(e=>e.id));for(const[e,n]of I.entries())t.has(e)||(n.classList.add("solved"),n.addEventListener("animationend",()=>{n.remove()}),I.delete(e));if(p&&C){const e=g.get_all_cards_for_display();let t="\n                <h3>All Cards</h3>\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Front</th>\n                            <th>Back</th>\n                            <th>S</th>\n                            <th>M</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n            ";for(const n of e)t+=`\n                    <tr ${n.is_unlocked?"":'class="locked"'}>\n                        <td>${n.front}</td>\n                        <td>${n.back}</td>\n                        <td>${n.success_count}</td>\n                        <td>${n.miss_count}</td>\n                    </tr>\n                `;t+="</tbody></table>",C.innerHTML=t}for(const t of e){let e=I.get(t.id);if(!e){e=document.createElement("div"),e.className="card",I.set(t.id,e),b.appendChild(e);const n=document.createElement("div");n.className="front";const a=document.createElement("span");a.className="card-text",n.appendChild(a),e.appendChild(n);const d=document.createElement("div");d.className="back";const o=document.createElement("span");o.className="card-text",d.appendChild(o),e.appendChild(d);const s=document.createElement("div");s.className="shields-container";for(let e=0;e<t.free_misses;e++){const e=document.createElement("span");e.className="shield",e.textContent="🛡️",s.appendChild(e)}n.appendChild(s)}const n=B.get(t.id);if(n&&!n.flipped&&t.flipped&&t.free_misses>0){const t=e.querySelectorAll(".shields-container .shield");if(t.length>0){const e=t[t.length-1];e.classList.add("lost"),e.addEventListener("animationend",()=>e.remove())}}t.flipped?e.classList.add("flipped"):e.classList.remove("flipped"),t.free_misses>0?e.classList.add("new"):e.classList.remove("new"),e.style.left=`${t.x}px`,e.style.top=`${t.y}px`,e.querySelector(".front .card-text").textContent=t.front,e.querySelector(".back .card-text").textContent=t.back}y.textContent=`Score: ${g.get_score()}`;const n=g.get_health(),a=g.get_max_health();let d="";for(let e=0;e<n;e++)d+="❤️";for(let e=0;e<a-n;e++)d+="🖤";E.innerHTML=d,g.is_game_over()&&(k.classList.remove("hidden"),g.get_missed_cards().length>0?x.classList.remove("hidden"):x.classList.add("hidden")),g.is_paused()?A.style.display="flex":A.style.display="none",B=new Map(e.map(e=>[e.id,{...e}]))}(),S=requestAnimationFrame(e)}),e.hot&&e.hot.dispose(()=>{window.location.reload()})}(o)):alert("You must enable at least one card to start the game.")}),o.addEventListener("click",()=>{u(a())}),s.addEventListener("change",e=>{const t=e.target.files[0];if(!t)return;const n=new FileReader;n.onload=e=>{const t=e.target.result.split("\n").filter(e=>""!==e.trim()).map(e=>{if(e.startsWith("#"))return null;const t=e.split("\t");return t.length>=2?{front:t[0].trim(),back:t[1].trim()}:null}).filter(Boolean);t.length>0?u(t):(alert('Could not parse deck. Make sure it is a tab-separated .txt file with "front\tback" format.'),s.value="")},n.readAsText(t)})}).catch(console.error))})();
//# sourceMappingURL=bootstrap.js.map