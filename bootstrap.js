(()=>{var e,t,n,a,o={},d={};function s(e){var t=d[e];if(void 0!==t)return t.exports;var n=d[e]={exports:{}};return o[e](n,n.exports,s),n.exports}s.m=o,t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,s.t=function(n,a){if(1&a&&(n=this(n)),8&a)return n;if("object"==typeof n&&n){if(4&a&&n.__esModule)return n;if(16&a&&"function"==typeof n.then)return n}var o=Object.create(null);s.r(o);var d={};e=e||[null,t({}),t([]),t(t)];for(var r=2&a&&n;("object"==typeof r||"function"==typeof r)&&!~e.indexOf(r);r=t(r))Object.getOwnPropertyNames(r).forEach(e=>d[e]=()=>n[e]);return d.default=()=>n,s.d(o,d),o},s.d=(e,t)=>{for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.f={},s.e=e=>Promise.all(Object.keys(s.f).reduce((t,n)=>(s.f[n](e,t),t),[])),s.u=e=>e+".bootstrap.js",s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n={},a="flashcards-www:",s.l=(e,t,o,d)=>{if(n[e])n[e].push(t);else{var r,i;if(void 0!==o)for(var l=document.getElementsByTagName("script"),c=0;c<l.length;c++){var m=l[c];if(m.getAttribute("src")==e||m.getAttribute("data-webpack")==a+o){r=m;break}}r||(i=!0,(r=document.createElement("script")).charset="utf-8",r.timeout=120,s.nc&&r.setAttribute("nonce",s.nc),r.setAttribute("data-webpack",a+o),r.src=e),n[e]=[t];var u=(t,a)=>{r.onerror=r.onload=null,clearTimeout(p);var o=n[e];if(delete n[e],r.parentNode&&r.parentNode.removeChild(r),o&&o.forEach(e=>e(a)),t)return t(a)},p=setTimeout(u.bind(null,void 0,{type:"timeout",target:r}),12e4);r.onerror=u.bind(null,r.onerror),r.onload=u.bind(null,r.onload),i&&document.head.appendChild(r)}},s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.p="/DropCardRs/",(()=>{s.b=document.baseURI||self.location.href;var e={792:0};s.f.j=(t,n)=>{var a=s.o(e,t)?e[t]:void 0;if(0!==a)if(a)n.push(a[2]);else{var o=new Promise((n,o)=>a=e[t]=[n,o]);n.push(a[2]=o);var d=s.p+s.u(t),r=new Error;s.l(d,n=>{if(s.o(e,t)&&(0!==(a=e[t])&&(e[t]=void 0),a)){var o=n&&("load"===n.type?"missing":n.type),d=n&&n.target&&n.target.src;r.message="Loading chunk "+t+" failed.\n("+o+": "+d+")",r.name="ChunkLoadError",r.type=o,r.request=d,a[1](r)}},"chunk-"+t,t)}};var t=(t,n)=>{var a,o,[d,r,i]=n,l=0;if(d.some(t=>0!==e[t])){for(a in r)s.o(r,a)&&(s.m[a]=r[a]);i&&i(s)}for(t&&t(n);l<d.length;l++)o=d[l],s.o(e,o)&&e[o]&&e[o][0](),e[o]=0},n=self.webpackChunkflashcards_www=self.webpackChunkflashcards_www||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),window.isFlashCardGameRunning?console.warn("Skipping duplicate game initialization."):(window.isFlashCardGameRunning=!0,Promise.all([s.e(488).then(s.bind(s,488)),s.e(287).then(s.t.bind(s,287,17)),s.e(834).then(s.bind(s,834))]).then(async([e,t,n])=>{await e.default(t.default);const{Game:a,GameMode:o,parse_deck:d,configure_deck:s}=e,{CARD_DATA:r}=n,i=document.getElementById("start-screen"),l=document.getElementById("start-default-btn"),c=document.getElementById("anki-import-input"),m=document.getElementById("game-container"),u=document.getElementById("deck-config-screen"),p=document.getElementById("card-list-container"),f=document.getElementById("start-configured-game-btn");let h=[];function g(e){h=e,p.innerHTML="";const t=document.createElement("ul");t.id="card-list",e.forEach((e,n)=>{const a=document.createElement("li");a.draggable=!0,a.dataset.originalIndex=n;const o=document.createElement("input");o.type="checkbox",o.checked=!0;const d=document.createElement("label");d.textContent=`${e.front} - ${e.back}`,a.appendChild(o),a.appendChild(d),t.appendChild(a)}),p.appendChild(t);let n=null;t.addEventListener("dragstart",e=>{n=e.target,e.dataTransfer.effectAllowed="move",setTimeout(()=>e.target.classList.add("dragging"),0)}),t.addEventListener("dragend",e=>{n&&n.classList.remove("dragging")}),t.addEventListener("dragover",e=>{e.preventDefault();const a=e.target.closest("li");if(a&&a!==n){const o=a.getBoundingClientRect(),d=(e.clientY-o.top)/(o.bottom-o.top)>.5;t.insertBefore(n,d&&a.nextSibling||a)}}),i.classList.add("hidden"),u.classList.remove("hidden")}f.addEventListener("click",()=>{const t=document.getElementById("card-list"),n=[];if(t.querySelectorAll("li").forEach(e=>{if(e.querySelector('input[type="checkbox"]').checked){const t=parseInt(e.dataset.originalIndex,10);n.push(t)}}),0!==n.length)try{const t=s(h,n);u.classList.add("hidden"),function(t){m.classList.remove("hidden");const n=document.createElement("style");n.textContent="\n        .shake {\n            animation: shake 0.5s;\n        }\n        @keyframes shake {\n            10%, 90% { transform: translateX(-1px); }\n            20%, 80% { transform: translateX(2px); }\n            30%, 50%, 70% { transform: translateX(-4px); }\n            40%, 60% { transform: translateX(4px); }\n        }\n        .card.solved {\n            animation: solved-animation 0.5s forwards;\n        }\n        @keyframes solved-animation {\n            to {\n                transform: scale(1.1);\n                opacity: 0;\n            }\n        }\n    ",document.head.appendChild(n);const d=document.getElementById("game-board"),s=d.clientWidth,r=d.clientHeight,l=document.querySelector('input[name="game-mode"]:checked').value;let u=o.Normal;"reverse"===l?u=o.Reverse:"both"===l&&(u=o.Both);const p=document.getElementById("debug-mode").checked,f=window.innerWidth<=600?.75:1,h=BigInt(Math.floor(Math.random()*2**32));let g;try{g=a.new(s,r,h,u,f,t)}catch(e){return alert(`Error initializing game: ${e}`),i.classList.remove("hidden"),m.classList.add("hidden"),void(c.value="")}const v=g.get_id();console.log(`[Game ${v}] Initialized.`);const b=document.getElementById("cards-container"),y=document.getElementById("score"),E=document.getElementById("health"),k=document.getElementById("game-over-screen"),_=document.getElementById("answer-input"),w=document.getElementById("submit-btn"),L=document.getElementById("pause-btn"),x=document.getElementById("anki-export-btn");let C=null,I=new Map,B=new Map;p&&(C=document.createElement("div"),C.id="debug-pane",document.body.appendChild(C));let S=null,j=null,A=null,O=null;const M=document.createElement("div");function T(){if(g.is_game_over())g.restart(),k.classList.add("hidden"),x.classList.add("hidden"),M.style.display="none",_.focus();else if(g.is_paused())g.resume();else{const e=_.value;e&&(g.submit_answer(e)||(d.classList.add("shake"),setTimeout(()=>{d.classList.remove("shake")},500)),_.value="")}}M.id="pause-screen",M.className="overlay",M.innerHTML="<h1>Paused</h1><p>Press Enter to continue</p>",Object.assign(M.style,{position:"absolute",top:"0",left:"0",width:"100%",height:"100%",backgroundColor:"rgba(0, 0, 0, 0.7)",color:"white",zIndex:"20",display:"none",justifyContent:"center",alignItems:"center",flexDirection:"column"}),d.appendChild(M),j=e=>{"Enter"===e.key&&(e.preventDefault(),T())},_.addEventListener("keydown",j),w.addEventListener("click",T),A=e=>{"Tab"!==e.key||g.is_game_over()||(e.preventDefault(),g.pause())},document.addEventListener("keydown",A),L.addEventListener("click",()=>{g.is_game_over()||g.pause()}),x.addEventListener("click",function(){const e=g.generate_anki_export();if(!e)return void alert("No missed cards to export.");const t=new Blob([e],{type:"text/plain;charset=utf-8;"}),n=document.createElement("a");if(void 0!==n.download){const e=URL.createObjectURL(t);n.setAttribute("href",e),n.setAttribute("download","anki_export.txt"),n.style.visibility="hidden",document.body.appendChild(n),n.click(),document.body.removeChild(n)}}),O=()=>{document.hidden&&!g.is_game_over()&&g.pause()},document.addEventListener("visibilitychange",O);let N=0;S=requestAnimationFrame(function e(t){const n=(t-N)/1e3;N=t,g.tick(n||0),function(){const e=g.get_cards_for_render(),t=new Set(e.map(e=>e.id));for(const[e,n]of I.entries())t.has(e)||(n.classList.add("solved"),n.addEventListener("animationend",()=>{n.remove()}),I.delete(e));if(p&&C){const e=g.get_all_cards_for_display();let t="\n                <h3>All Cards</h3>\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Front</th>\n                            <th>Back</th>\n                            <th>S</th>\n                            <th>M</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n            ";for(const n of e)t+=`\n                    <tr ${n.is_unlocked?"":'class="locked"'}>\n                        <td>${n.front}</td>\n                        <td>${n.back}</td>\n                        <td>${n.success_count}</td>\n                        <td>${n.miss_count}</td>\n                    </tr>\n                `;t+="</tbody></table>",C.innerHTML=t}for(const t of e){let e=I.get(t.id);if(!e){e=document.createElement("div"),e.className="card",I.set(t.id,e),b.appendChild(e);const n=document.createElement("div");n.className="front";const a=document.createElement("span");a.className="card-text",n.appendChild(a),e.appendChild(n);const o=document.createElement("div");o.className="back";const d=document.createElement("span");d.className="card-text",o.appendChild(d),e.appendChild(o);const s=document.createElement("div");s.className="shields-container";for(let e=0;e<t.free_misses;e++){const e=document.createElement("span");e.className="shield",e.textContent="🛡️",s.appendChild(e)}n.appendChild(s),e.textSpans={front:a,back:d}}const n=B.get(t.id);if(n&&!n.flipped&&t.flipped&&t.free_misses>0){const t=e.querySelectorAll(".shields-container .shield");if(t.length>0){const e=t[t.length-1];e.classList.add("lost"),e.addEventListener("animationend",()=>e.remove())}}t.flipped?e.classList.add("flipped"):e.classList.remove("flipped"),t.free_misses>0?e.classList.add("new"):e.classList.remove("new"),e.style.left=`${t.x}px`,e.style.top=`${t.y}px`,e.textSpans.front.textContent=t.front,e.textSpans.back.textContent=t.back}y.textContent=`Score: ${g.get_score()}`;const n=g.get_health(),a=g.get_max_health();let o="";for(let e=0;e<n;e++)o+="❤️";for(let e=0;e<a-n;e++)o+="🖤";E.innerHTML=o,g.is_game_over()&&(k.classList.remove("hidden"),g.get_missed_cards().length>0?x.classList.remove("hidden"):x.classList.add("hidden")),g.is_paused()?M.style.display="flex":M.style.display="none",B=new Map(e.map(e=>[e.id,{...e}]))}(),S=requestAnimationFrame(e)}),e.hot&&e.hot.dispose(()=>{window.location.reload()})}(t)}catch(e){alert(`Error configuring deck: ${e}`)}else alert("You must enable at least one card to start the game.")}),l.addEventListener("click",()=>{g(d(r))}),c.addEventListener("change",e=>{const t=e.target.files[0];if(!t)return;const n=new FileReader;n.onload=e=>{const t=e.target.result,n=d(t);n.length>0?g(n):(alert('Could not parse deck. Make sure it is a tab-separated .txt file with "front\tback" format.'),c.value="")},n.readAsText(t)})}).catch(console.error))})();
//# sourceMappingURL=bootstrap.js.map